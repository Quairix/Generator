name: Build and Release

on:
  push:
    branches: [ "ScriptJson" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "ScriptJson" ]

env:
  Solution_Name: Generator.sln

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            configuration: Release
          - os: ubuntu-latest
            runtime: linux-x64
            configuration: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Check .NET SDK Version
        run: dotnet --version

      - name: Clean
        run: dotnet clean ./Generator/Generator.csproj --configuration ${{ matrix.configuration }}

      - name: Restore dependencies
        run: dotnet restore ./Generator/Generator.csproj --runtime ${{ matrix.runtime }}

      - name: Build
        run: dotnet build ./Generator/Generator.csproj --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --no-restore

      - name: Publish
        run: dotnet publish ./Generator/Generator.csproj --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --self-contained true --output ./publish /p:PublishSingleFile=false

      # Создаем архивы
      - name: Create ZIP archive (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path ./publish/* -DestinationPath Generator-win-x64.zip
        shell: pwsh

      - name: Create TAR.GZ archive (Linux)
        if: runner.os == 'Linux'
        run: |
          tar -czvf Generator-linux-x64.tar.gz -C ./publish .
        shell: bash

      # Загружаем архивы как артефакты
      - name: Upload build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: Generator-win-x64
          path: Generator-win-x64.zip

      - name: Upload build artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: Generator-linux-x64
          path: Generator-linux-x64.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Полная история для создания тегов
  
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
  
      - name: Generate Release Tag
        id: generate_tag
        run: |
          TAG_NAME="v0.0.${GITHUB_RUN_NUMBER}"
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
  
      - name: Create and Push Tag
        run: |
          git tag ${{ steps.generate_tag.outputs.tag }}
          git push origin ${{ steps.generate_tag.outputs.tag }}
  
      - name: Download Windows build artifacts
        uses: actions/download-artifact@v3
        with:
          name: Generator-win-x64
          path: ./artifacts/win-x64
  
      - name: Download Linux build artifacts
        uses: actions/download-artifact@v3
        with:
          name: Generator-linux-x64
          path: ./artifacts/linux-x64
  
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            artifacts/win-x64/Generator-win-x64.zip
            artifacts/linux-x64/Generator-linux-x64.tar.gz
          tag: ${{ steps.generate_tag.outputs.tag }}
          name: Release ${{ steps.generate_tag.outputs.tag }}
          body: "Автоматически сгенерированный релиз для версии ${{ steps.generate_tag.outputs.tag }}."
          token: ${{ github.token }}
